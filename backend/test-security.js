#!/usr/bin/env node

/**
 * Script de test de s√©curit√© pour dlpz.fr
 * Teste les protections contre les ex√©cutions malveillantes
 */

import {
  validateMimeType,
  validateFilename,
  analyzeFileContent,
  sanitizeUrl,
  sanitizeInput,
} from "./middleware/security.js";
import fs from "fs/promises";
import { join } from "path";

const tests = [
  {
    name: "Validation des types MIME",
    tests: [
      {
        input: { mimetype: "image/jpeg", filename: "test.jpg" },
        expected: true,
        description: "JPEG valide",
      },
      {
        input: { mimetype: "image/jpeg", filename: "test.exe" },
        expected: false,
        description: "Extension ne correspond pas au MIME",
      },
      {
        input: { mimetype: "application/php", filename: "test.php" },
        expected: false,
        description: "Type MIME non autoris√©",
      },
    ],
  },
  {
    name: "Validation des noms de fichiers",
    tests: [
      {
        input: "image.jpg",
        expected: true,
        description: "Nom de fichier valide",
      },
      {
        input: "script.js",
        expected: false,
        description: "Extension dangereuse",
      },
      {
        input: "test<script>.jpg",
        expected: false,
        description: "Caract√®res dangereux",
      },
      {
        input: "con.jpg",
        expected: false,
        description: "Nom r√©serv√© Windows",
      },
    ],
  },
  {
    name: "Sanitisation des URLs",
    tests: [
      {
        input: "https://example.com",
        expected: true,
        description: "URL valide",
      },
      {
        input: "http://localhost:3002",
        expected: false,
        description: "URL priv√©e",
      },
      {
        input: "javascript:alert(1)",
        expected: false,
        description: "Protocole dangereux",
      },
      {
        input: "https://bit.ly/malicious",
        expected: false,
        description: "Domaine de raccourcissement",
      },
    ],
  },
  {
    name: "Sanitisation des entr√©es",
    tests: [
      {
        input: "Hello World",
        expected: "Hello World",
        description: "Texte normal",
      },
      {
        input: "<script>alert(1)</script>",
        expected: "&lt;script&gt;alert(1)&lt;&#x2F;script&gt;",
        description: "HTML √©chapp√©",
      },
      {
        input: "test\x00\x01\x02",
        expected: "test",
        description: "Caract√®res de contr√¥le supprim√©s",
      },
    ],
  },
];

// Fonction de test
const runTests = async () => {
  console.log("üß™ Tests de s√©curit√© dlpz.fr\n");

  let totalTests = 0;
  let passedTests = 0;

  for (const testSuite of tests) {
    console.log(`üìã ${testSuite.name}`);

    for (const test of testSuite.tests) {
      totalTests++;

      try {
        let result;

        switch (testSuite.name) {
          case "Validation des types MIME":
            result = validateMimeType(test.input.mimetype, test.input.filename);
            result = result.valid;
            break;

          case "Validation des noms de fichiers":
            result = validateFilename(test.input);
            result = result.valid;
            break;

          case "Sanitisation des URLs":
            result = sanitizeUrl(test.input);
            result = result.valid;
            break;

          case "Sanitisation des entr√©es":
            result = sanitizeInput(test.input);
            result = result === test.expected;
            break;
        }

        const passed = result === test.expected;
        if (passed) {
          passedTests++;
          console.log(`  ‚úÖ ${test.description}`);
        } else {
          console.log(
            `  ‚ùå ${test.description} (attendu: ${test.expected}, obtenu: ${result})`
          );
        }
      } catch (error) {
        console.log(`  üí• ${test.description} - Erreur: ${error.message}`);
      }
    }

    console.log("");
  }

  // R√©sum√©
  console.log("üìä R√©sum√© des tests");
  console.log(`   Tests ex√©cut√©s: ${totalTests}`);
  console.log(`   Tests r√©ussis: ${passedTests}`);
  console.log(`   Tests √©chou√©s: ${totalTests - passedTests}`);
  console.log(
    `   Taux de r√©ussite: ${Math.round((passedTests / totalTests) * 100)}%`
  );

  if (passedTests === totalTests) {
    console.log("\nüéâ Tous les tests de s√©curit√© sont pass√©s !");
    console.log("   Le backend est pr√™t pour la production.");
  } else {
    console.log("\n‚ö†Ô∏è  Certains tests ont √©chou√©.");
    console.log("   V√©rifiez la configuration de s√©curit√©.");
    process.exit(1);
  }
};

// Test de cr√©ation de fichier malveillant
const testMaliciousFile = async () => {
  console.log("\nüîç Test de d√©tection de fichier malveillant");

  const maliciousContent = '<script>alert("XSS")</script>';
  const testFile = join(process.cwd(), "test-malicious.html");

  try {
    await fs.writeFile(testFile, maliciousContent);

    const analysis = await analyzeFileContent(testFile, "text/html");

    if (!analysis.safe) {
      console.log("  ‚úÖ Fichier malveillant d√©tect√© et bloqu√©");
    } else {
      console.log("  ‚ùå Fichier malveillant non d√©tect√© !");
    }

    // Nettoyer
    await fs.unlink(testFile);
  } catch (error) {
    console.log(`  üí• Erreur lors du test: ${error.message}`);
  }
};

// Ex√©cuter tous les tests
const runAllTests = async () => {
  await runTests();
  await testMaliciousFile();
};

runAllTests().catch((error) => {
  console.error("üí• Erreur lors des tests:", error);
  process.exit(1);
});
